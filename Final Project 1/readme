I have learned the purposes of having building tool software, such as Gradle. This helps developers to work efficiently with their code, meaning that they do not have to put in the extra work to manually change the code. The build tool will help automate and manage dependencies for programs in the future and maintain them on a consistent basis. It uses its own programming language called Groovy, making Java code smaller, but functional and simple. 
IntelliJ provides a reference card that displays keyboard shortcuts for specific actions. I find this sheet convenient in time and trial & error. I do not have to navigate through all the functions searching for a specific keyword; instead I can print the sheet or display on another monitor and scan other shortcuts. 
I can change the class name without having to change all the other class names one by one using the refactor method. 
I did not realize both Java and Android are completely separated in terms of libraries and kits. However, Android inherits a lot of their core APIs from Java. For example, Android cannot use the try-with-resources when using a certain API from Oracle. 
Optimizing the code can help increase the performance of the app, but that is if there are major issues when the memory is using too much or the specs of the hardware cannot handle the amount of data. One example of optimizing code is by combining separate strings using the append method and passing that into the toString method all in one line. This helps cut the amount of time of executing a code one by one. The constructor will have all methods in one line and passed to the parameter only once instead of having multiple lines of code executing multiple codes.
Android developers use the activity class to test out the methods that can display on the virtual device and see how their code will run through different lifecycle methods. The lifecycle will help determine how the custom codes will illustrate in various scenarios and testing the performance and memory use. 
